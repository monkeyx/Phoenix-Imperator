{"Name":"Aardvark","Id":2187,"Alias":"square.aardvark","Description":"# Aardvark Details\r\n\r\n\u003e Aardvark is a library that makes it dead simple to create actionable bug reports.\r\n\r\n## Usage\r\n\r\nOnce installed, Aardvark logging can be used with the `Aardvark` type:\r\n\r\n    Arrdvark.Log(\"something happened\");\r\n    \r\nWe can also add the default two-finger, long-tap gesture to report a bug:\r\n\r\n    Aardvark.AddDefaultBugReportingGesture(\"bugs@example.org\");\r\n\r\n*NOTE: It is best to do this when you load your application’s UI.*\r\n\r\n## Reporting Bugs\r\n\r\nUsers can report a bug by making a two-finger long-press gesture. This gesture triggers a\r\n`UIAlert` asking the user what went wrong. When the user enters this information, an email \r\nbug report is generated complete with an attached app screenshot and a text file containing \r\nthe last 2000 logs. \r\n\r\nScreenshots are created and stored within Aardvark and do not require camera roll access.\r\n\r\n## Bug Report Flow\r\n\r\nTo view logs on the device, push an instance of `LogTableViewController` onto the screen to view\r\nthe apps logs.\r\n\r\n## Performance\r\n\r\nLogs are distributed to loggers on an internal background queue that will never slow down your app. \r\nLogs observed by the log store are incrementally appended to disk and not stored in memory.\r\n\r\n## Customize Aardvark\r\n\r\nTo customize how bug reports are filed, we pass our own object conforming to the `IBugReporter` \r\ninterface and the desired subclass of `UIGestureRecognizer` to `Aardvark.AddBugReporter`:\r\n\r\n    IBugReporter bugReporter = new CustomBugReporter();\r\n    Aardvark.AddBugReporter\u003cCustomGestureRecognizer\u003e(bugReporter);\r\n\r\nTo change how logs are formatted, we set our own `ILogFormatter` on the `EmailBugReporter` type:\r\n\r\n    bugReporter.LogFormatter = new CustomLogFormatter();\r\n\r\nTo log to the console, we set the `PrintsLogsToConsole` property to `true`:\r\n\r\n    LogDistributor.DefaultDistributor.DefaultLogStore.PrintsLogsToConsole = true;\r\n\r\nTo create different log files for different features, we create a `LogStore` for each feature we\r\nwant to have its own log file and add them to the default log distributor:\r\n\r\n    LogStore featureLogStore = new LogStore(\"FeatureLogs.data\");\r\n    LogDistributor.DefaultDistributor.AddLogObserver(featureLogStore);\r\n\r\nThen, we set the `LogFilterBlock` on our `LogStore` to make sure only the logs we want are observed\r\nby the `LogStore`. We can use the user info dictionary to specify to which feature a log pertains:\r\n\r\n    featureLogStore.LogFilterBlock = logMessage =\u003e {\r\n        return logMessage.UserInfo != null \u0026\u0026 \r\n               logMessage.UserInfo [\"isFeature\"] != null;\r\n    };\r\n\r\nTo send your logs to third party services, we can easily distribute to multiple services by adding \r\nobjects implementing the `ILogObserver` interface:\r\n\r\n    ILogObserver observer = new CustomLogObserver();\r\n    LogDistributor.DefaultDistributor.AddLogObserver(observer);\r\n\r\nTo log with Aardvark but don’t use Aardvark’s bug reporting tool, do not use the \r\n`Aardvark.AddDefaultBugReportingGesture` method. Rather manually add an implementation of\r\n`ILogObserver` to the default `LogDistributor`:\r\n\r\n    LogStore silentLogger = new LogStore(\"Logs.data\");\r\n    LogDistributor.DefaultDistributor.AddLogObserver(silentLogger);\r\n","Version":"1.2.2.0","Summary":"Aardvark is a library that makes it dead simple to create actionable bug reports.","QuickStart":"# Getting Started with Aardvark\r\n\r\n\u003e Aardvark is a library that makes it dead simple to create actionable bug reports.\r\n\r\n## Usage\r\n\r\nOnce installed, Aardvark logging can be used with the `Aardvark` type:\r\n\r\n    Arrdvark.Log(\"something happened\");\r\n    \r\nWe can also add the default two-finger, long-tap gesture to report a bug:\r\n\r\n    Aardvark.AddDefaultBugReportingGesture(\"bugs@example.org\");\r\n\r\n*NOTE: It is best to do this when you load your application’s UI.*\r\n\r\n## Reporting Bugs\r\n\r\nUsers can report a bug by making a two-finger long-press gesture. This gesture triggers a\r\n`UIAlert` asking the user what went wrong. When the user enters this information, an email \r\nbug report is generated complete with an attached app screenshot and a text file containing \r\nthe last 2000 logs. \r\n\r\nScreenshots are created and stored within Aardvark and do not require camera roll access.\r\n\r\n## Bug Report Flow\r\n\r\nTo view logs on the device, push an instance of `LogTableViewController` onto the screen to view\r\nthe apps logs.\r\n\r\n## Performance\r\n\r\nLogs are distributed to loggers on an internal background queue that will never slow down your app. \r\nLogs observed by the log store are incrementally appended to disk and not stored in memory.\r\n\r\n## Customize Aardvark\r\n\r\nTo customize how bug reports are filed, we pass our own object conforming to the `IBugReporter` \r\ninterface and the desired subclass of `UIGestureRecognizer` to `Aardvark.AddBugReporter`:\r\n\r\n    IBugReporter bugReporter = new CustomBugReporter();\r\n    Aardvark.AddBugReporter\u003cCustomGestureRecognizer\u003e(bugReporter);\r\n\r\nTo change how logs are formatted, we set our own `ILogFormatter` on the `EmailBugReporter` type:\r\n\r\n    bugReporter.LogFormatter = new CustomLogFormatter();\r\n\r\nTo log to the console, we set the `PrintsLogsToConsole` property to `true`:\r\n\r\n    LogDistributor.DefaultDistributor.DefaultLogStore.PrintsLogsToConsole = true;\r\n\r\nTo create different log files for different features, we create a `LogStore` for each feature we\r\nwant to have its own log file and add them to the default log distributor:\r\n\r\n    LogStore featureLogStore = new LogStore(\"FeatureLogs.data\");\r\n    LogDistributor.DefaultDistributor.AddLogObserver(featureLogStore);\r\n\r\nThen, we set the `LogFilterBlock` on our `LogStore` to make sure only the logs we want are observed\r\nby the `LogStore`. We can use the user info dictionary to specify to which feature a log pertains:\r\n\r\n    featureLogStore.LogFilterBlock = logMessage =\u003e {\r\n        return logMessage.UserInfo != null \u0026\u0026 \r\n               logMessage.UserInfo [\"isFeature\"] != null;\r\n    };\r\n\r\nTo send your logs to third party services, we can easily distribute to multiple services by adding \r\nobjects implementing the `ILogObserver` interface:\r\n\r\n    ILogObserver observer = new CustomLogObserver();\r\n    LogDistributor.DefaultDistributor.AddLogObserver(observer);\r\n\r\nTo log with Aardvark but don’t use Aardvark’s bug reporting tool, do not use the \r\n`Aardvark.AddDefaultBugReportingGesture` method. Rather manually add an implementation of\r\n`ILogObserver` to the default `LogDistributor`:\r\n\r\n    LogStore silentLogger = new LogStore(\"Logs.data\");\r\n    LogDistributor.DefaultDistributor.AddLogObserver(silentLogger);\r\n","Hash":"998115b903950046135a2763d7122d9d","TargetPlatforms":["ios"],"TrialHash":null}